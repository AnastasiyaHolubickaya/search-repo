{"version":3,"sources":["components/splashScreen/splash.module.css","components/listItems/listItem.module.css","components/pagination/Paginator.module.css","components/splashScreen/splashScreen.tsx","components/commons/FormControls/FormControls.tsx","api/api.ts","redux/reducer.ts","components/listItems/ListItems.tsx","utils/sortByField.ts","components/pagination/Pagination.tsx","pages/home/HomePage.tsx","pages/detail/DetailPage.tsx","redux/selectors.ts","App.tsx","redux/store.ts","index.tsx","pages/home/homePage.module.css","components/commons/FormControls/FormControls.module.css","pages/detail/detailPage.module.css"],"names":["module","exports","SplashScreen","className","classes","container","animationIn","animationOut","isVisible","FormControl","children","meta","touched","error","showError","undefined","spanError","Input","props","input","restprops","ServerRequest","baseURL","url","currentPage","perPage","fetch","this","then","data","json","instance","getRepositopies","getInstance","initialState","isRequestSubmit","massRepos","isFirstTimeLoadApp","idSelectedRepo","message","totalCount","searchValue","actions","type","flag","id","mess","value","getRepos","dispatch","a","getData","total_count","items","reducer","state","action","ListItems","handleOnClick","useState","isFavorit","setFavorit","block","map","item","index","name","stargazers_count","to","onClick","style","marginRight","localStorage","getItem","removeItem","setItem","JSON","stringify","toString","byField","field","b","Pagination","onPageChange","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cursor","filter","p","cn","e","requiredField","ReduxForm","reduxForm","form","handleSubmit","loginForm","onSubmit","Field","component","validate","formSummaryError","loginFormButton","HomePage","dataRepoz","useSelector","app","isRequestSub","setData","isByName","setIsByName","isByRating","setIsByRating","isByDate","setIsByDate","useDispatch","useEffect","sort","formData","btn_group","fontSize","setClickRepo","page","DetailPage","width","src","owner","avatar_url","alt","block_info","login","description","created_at","href","html_url","getRepositoris","createSelector","getIdSelectRepo","getIsFistTimeLoadApp","App","setTimeout","setFlagFirstTimeLoadApp","exact","path","render","Component","compose","withRouter","connect","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.88e73f58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"splash_container__2tJso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"listItem_block__P23GK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Paginator_currentPage__2CYgm\"};","import React from \"react\";\r\nimport classes from './splash.module.css';\r\nimport {Animated} from \"react-animated-css\";\r\n\r\n\r\ntype propsType = {}\r\n\r\n\r\nexport const SplashScreen: React.FC<propsType> = () => {\r\n    return (\r\n        <div className={classes.container}>\r\n            <Animated animationIn=\"zoomIn\" animationOut=\"fadeOut\" isVisible={true}>\r\n                <p>\r\n                    Анастасия Голубицкая\r\n                </p>\r\n            </Animated>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport classes from \"./FormControls.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\ntype formPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<formPropsType> = ({children, meta: {touched, error}}) => {\r\n    const showError = touched && error;\r\n    return (\r\n        <div className={showError ? classes.error : undefined}>\r\n            {children}<br/>\r\n            {showError && <span className={classes.spanError}>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restprops} = props;\r\n    return <FormControl {...props}> <input {...input} {...restprops} className={classes.input}/></FormControl>\r\n};\r\n","class ServerRequest {\r\n    private baseURL = \"https://api.github.com/search/repositories\";\r\n    private static instance: ServerRequest;\r\n\r\n    private constructor() {\r\n    };\r\n\r\n    static getInstance(): ServerRequest {\r\n        if (typeof ServerRequest.instance === 'object') {\r\n            return ServerRequest.instance;\r\n        }\r\n        ServerRequest.instance = new ServerRequest();\r\n        return ServerRequest.instance;\r\n    }\r\n\r\n    getData(url: string, currentPage: number, perPage: number) {\r\n        return fetch(`${this.baseURL}?q=${url}&per_page=${perPage}&page=${currentPage}`)\r\n            .then(data => data.json())\r\n    }\r\n}\r\n\r\nexport const getRepositopies = ServerRequest.getInstance();","import {BaseThuncType, InferActionType} from \"./store\";\r\nimport {getRepositopies} from \"../api/api\";\r\n\r\n\r\ntype ActionsType = InferActionType<typeof actions>;\r\ntype ThuncType = BaseThuncType<ActionsType>\r\n\r\nexport type listType = {\r\n    id: number\r\n    name: string\r\n    stargazers_count: number\r\n    html_url: string\r\n    created_at: string\r\n    description: string\r\n    owner: {\r\n        avatar_url: string\r\n        login: string\r\n    }\r\n}\r\n\r\n\r\nlet initialState = {\r\n    isRequestSubmit: false,\r\n    massRepos: [] as Array<listType>,\r\n    isFirstTimeLoadApp: false,\r\n    idSelectedRepo: null as null | number,\r\n    message: null as null | string,\r\n    currentPage: 0,\r\n    perPage: 10,\r\n    totalCount: 0,\r\n    searchValue: \"\",\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\n\r\nconst reducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_REPO\":\r\n            return {\r\n                ...state,\r\n                massRepos: action.data,\r\n                isRequestSubmit: true,\r\n            };\r\n        case \"SET_FIRST_TIME_FLAG\":\r\n            return {\r\n                ...state,\r\n                isFirstTimeLoadApp: action.flag,\r\n            };\r\n        case \"SET_CLICK_ID\":\r\n            return {\r\n                ...state,\r\n                idSelectedRepo: action.id,\r\n            };\r\n        case \"SET_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                message: action.mess,\r\n            };\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case \"SET_SEARCH_VALUE\":\r\n            return {\r\n                ...state,\r\n                searchValue: action.value\r\n            };\r\n        case \"SET_TOTAL_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const actions = {\r\n    setRepo: (data: any) => ({type: \"SET_REPO\", data} as const),\r\n    setIsFirstTimeLoadApp: (flag: boolean) => ({type: \"SET_FIRST_TIME_FLAG\", flag} as const),\r\n    setId: (id: number) => ({type: \"SET_CLICK_ID\", id} as const),\r\n    setMessage: (mess: string) => ({type: \"SET_MESSAGE\", mess} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: \"SET_CURRENT_PAGE\", currentPage} as const),\r\n    setSearchValue: (value: string) => ({type: \"SET_SEARCH_VALUE\", value} as const),\r\n    setTotalCount: (totalCount: number) => ({type: \"SET_TOTAL_COUNT\", totalCount} as const),\r\n};\r\n\r\nexport const getRepos = (searchValue: string, currentPage: number, perPage: number): ThuncType => async (dispatch: any) => {\r\n    let data = await getRepositopies.getData(searchValue, currentPage, perPage);\r\n    if (data.message) {\r\n        dispatch(actions.setMessage(data.message))\r\n    } else {\r\n        dispatch(actions.setTotalCount(data.total_count));\r\n        dispatch(actions.setRepo(data.items))\r\n    }\r\n};\r\nexport const setFlagFirstTimeLoadApp = (flag: boolean) => (dispatch: any) => {\r\n    dispatch(actions.setIsFirstTimeLoadApp(flag))\r\n};\r\nexport const setClickRepo = (id: number) => (dispatch: any) => {\r\n    dispatch(actions.setId(id))\r\n};\r\n\r\n\r\nexport default reducer;","import React, {useState} from \"react\";\r\nimport classes from './listItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\ntype propsType = {\r\n    data: any\r\n    handleOnClick: (id: number) => void\r\n}\r\n\r\n\r\nexport const ListItems: React.FC<propsType> = ({data, handleOnClick}) => {\r\n    const [isFavorit, setFavorit] = useState(false);\r\n\r\n\r\n    const handleAddFavorit = (name: string, id: number) => {\r\n       if(isFavorit){\r\n           setFavorit(false)\r\n       }else {\r\n           setFavorit(true)\r\n       }\r\n        localStorage.setItem(name, JSON.stringify(id));\r\n    };\r\n    const handleRemoveFavorit = (name: string) => {\r\n        if(isFavorit){\r\n            setFavorit(false)\r\n        }else {\r\n            setFavorit(true)\r\n        }\r\n        localStorage.removeItem(name);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.block}>\r\n            {data.map((item: any, index: number) => {\r\n                return <div key={item.id.toString()} className=\"card-panel white\">\r\n                    <p className=\"black-text\">Name REPO: <b className=\"teal-text\">{item.name}</b></p>\r\n                    <p className=\"black-text\">Rating: {item.stargazers_count}</p>\r\n                    <NavLink to={'/details'}>\r\n                        <button\r\n                            className=\"waves-effect waves-light white teal-text  btn-small\"\r\n                            onClick={() => handleOnClick(index)}\r\n                            style={{marginRight:\"20px\"}}> detail\r\n                        </button>\r\n\r\n                    </NavLink>\r\n                    {localStorage.getItem(item.name) ?\r\n                        <button onClick={() => handleRemoveFavorit(item.name)}\r\n                                className=\"waves-effect waves-light lime lighten-2 teal-text  btn-small\">remove to favorit\r\n                        </button>\r\n                        : <button onClick={() => handleAddFavorit(item.name, item.id)}\r\n                                  className=\"waves-effect waves-light white teal-text lighten-2 btn-small\"\r\n                                  >add to favorit </button>\r\n                    }\r\n                </div>\r\n            })}\r\n\r\n        </div>\r\n\r\n    )\r\n};","export const byField = (field: any) => {\r\n    return (a: any, b: any) => a[field] > b[field] ? 1 : -1;\r\n};\r\n","import React, {useState} from \"react\";\r\nimport classes from './Paginator.module.css';\r\nimport cn from \"classnames\"\r\n\r\ntype propsType = {\r\n    currentPage: number\r\n    perPage: number\r\n    totalCount: number\r\n    onPageChange: (pageNumber: number) => void\r\n}\r\n\r\nconst Pagination: React.FC<propsType> = ({currentPage, perPage, totalCount, onPageChange}) => {\r\n\r\n    let portionSize = 10;\r\n\r\n    let pagesCount = Math.ceil(totalCount / perPage);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n\r\n        <div className=\"pagination\">\r\n            {portionNumber > 1 &&\r\n            <span style={{cursor:\"pointer\"}} onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}><i className=\"material-icons\">chevron_left</i> </span>\r\n            }\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span style={{cursor:\"pointer\"}} className={cn(currentPage === p && classes.currentPage)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChange(p)\r\n                                 }}> {p} </span>\r\n                })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <span style={{cursor:\"pointer\"}} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}><i className=\"material-icons\">chevron_right</i> </span>\r\n            }\r\n        </div>\r\n    )\r\n};\r\nexport default Pagination;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport classes from './homePage.module.css';\r\nimport {Input} from \"../../components/commons/FormControls/FormControls\";\r\nimport {actions, getRepos, listType, setClickRepo} from \"../../redux/reducer\";\r\nimport {ListItems} from \"../../components/listItems/ListItems\";\r\nimport {byField} from \"../../utils/sortByField\";\r\nimport Pagination from \"../../components/pagination/Pagination\";\r\n\r\n\r\ntype ownPropsType = {}\r\ntype PropsType = {\r\n    dataRepoz: Array<listType>\r\n}\r\ntype formDataType = {\r\n    name: string\r\n}\r\ntype validatorType = (value: string) => string | undefined\r\n\r\nconst requiredField: validatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"введите данные для поиска\";\r\n};\r\n/*const validateSumbol: validatorType = (value) => {\r\n    if (value !== undefined) {\r\n        let regex = new RegExp(/^[a-zA-Z0-9]+$/i);\r\n        if (!regex.test(value)) return (`разрешен ввод только букв латинского алфавита`);\r\n    }\r\n    return undefined;\r\n};*/\r\nconst SearchForm: React.FC<InjectedFormProps<formDataType> & ownPropsType> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form className={classes.loginForm} onSubmit={handleSubmit}>\r\n            <div className=\"input-field name-input\"><Field name={'name'}\r\n                                                           component={Input}\r\n                                                           validate={[requiredField]}/></div>\r\n            {\r\n                error && <div className={classes.formSummaryError}> {error}</div>\r\n            }\r\n            <div className={classes.loginFormButton}>\r\n                <button className=\"btn waves-effect waves-light\">Submit<i className=\"material-icons right\"> </i></button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\nconst ReduxForm = reduxForm<formDataType, ownPropsType>({\r\n    form: 'search'\r\n})(SearchForm);\r\n\r\n\r\nexport const HomePage: React.FC<PropsType> = ({dataRepoz}) => {\r\n\r\n        const searchValue = useSelector((state: AppStateType) => state.app.searchValue);\r\n        const currentPage = useSelector((state: AppStateType) => state.app.currentPage);\r\n        const totalCount = useSelector((state: AppStateType) => state.app.totalCount);\r\n        const perPage = useSelector((state: AppStateType) => state.app.perPage);\r\n        const isRequestSub = useSelector((state: AppStateType) => state.app.isRequestSubmit);\r\n        const mess = useSelector((state: AppStateType) => state.app.message);\r\n\r\n        const [data, setData] = useState(dataRepoz);\r\n        const [isByName, setIsByName] = useState(false);\r\n        const [isByRating, setIsByRating] = useState(false);\r\n        const [isByDate, setIsByDate] = useState(false);\r\n\r\n        const dispatch = useDispatch();\r\n\r\n        const onSubmit = (formData: formDataType) => {\r\n            dispatch(actions.setSearchValue(formData.name));\r\n            dispatch(actions.setCurrentPage(1));\r\n            dispatch(getRepos(formData.name, currentPage, perPage));\r\n        };\r\n        const handleOnClick = (id: number) => {\r\n            dispatch(setClickRepo(id));\r\n        };\r\n        const onPageChange = (page: number) => {\r\n            dispatch(actions.setCurrentPage(page))\r\n        };\r\n        useEffect(() => {\r\n            if (searchValue !== '' || currentPage >= 1)\r\n                dispatch(getRepos(searchValue, currentPage, perPage));\r\n        }, [currentPage, searchValue]);\r\n\r\n        useEffect(() => {\r\n            setData(dataRepoz);\r\n        }, [dataRepoz]);\r\n\r\n        useEffect(() => {\r\n            if (isByName) {\r\n                setData(dataRepoz.sort(byField(\"name\")));\r\n                setIsByName(false)\r\n            }\r\n            if (isByRating) {\r\n                setData(dataRepoz.sort(byField(\"stargazers_count\")));\r\n                setIsByRating(false)\r\n            }\r\n            if (isByDate) {\r\n                setData(dataRepoz.sort(byField(\"created_at\")));\r\n                setIsByDate(false)\r\n            }\r\n        }, [isByName, isByDate, isByRating]);\r\n\r\n        return (\r\n            <div className={classes.container}>\r\n                <div >\r\n                    <p className=\"card-panel teal lighten-2 white-text \">Search repos in  GitHub</p>\r\n                </div>\r\n\r\n                <ReduxForm\r\n                    onSubmit={onSubmit}\r\n                />\r\n                <div className={classes.btn_group}>\r\n                    <p className=\"black-text \" style={{fontSize: \"14px\"}}>SORT to:</p>\r\n                    <button className=\"waves-effect waves-light white teal-text btn-small\" onClick={() => (setIsByName(true))}>name</button>\r\n                    <button className=\"waves-effect waves-light white teal-text btn-small\" onClick={() => (setIsByDate(true))}>date</button>\r\n                    <button className=\"waves-effect waves-light white teal-text btn-small\" onClick={() => (setIsByRating(true))}>rating</button>\r\n                </div>\r\n                {isRequestSub && <ListItems data={data}\r\n                                            handleOnClick={handleOnClick}\r\n                />}\r\n                {mess && <div>по вашему запросу ничего не найдено: {mess}</div>}\r\n                <Pagination\r\n                    totalCount={totalCount}\r\n                    currentPage={currentPage}\r\n                    perPage={perPage}\r\n                    onPageChange={onPageChange}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n;\r\n","import React from \"react\";\r\nimport classes from './detailPage.module.css';\r\nimport {listType} from \"../../redux/reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype propsType = {\r\n    data: listType\r\n}\r\n\r\n\r\nexport const DetailPage: React.FC<propsType> = ({data}) => {\r\n    return (\r\n        <div className=\"card-panel white \">\r\n            <div className={classes.block}>\r\n                <div className=\"card-image\" style={{width:\"200px\", marginRight:\"20px\"}}>\r\n                    <img style={{width:\"100%\"}} src={data.owner.avatar_url} alt=\"\"/>\r\n                </div>\r\n                <div className={classes.block_info}>\r\n                    <span>Name repositories:</span>\r\n                    <span>{data.name}</span>\r\n                    <span>Autor: </span>\r\n                    <span>{data.owner.login}</span>\r\n                    <span>Description: </span>\r\n                    <span>{data.description}</span>\r\n                    <span>Created data: </span>\r\n                    <span>{data.created_at}</span>\r\n                    <a className=\"card-action lime-text\" href={data.html_url}><b>Link GitHub</b></a>\r\n                    <NavLink className=\"waves-effect waves-light white teal-text  btn-small\" to =\"/\" >HOME</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nexport  const getRepos = (state:AppStateType) => {\r\n    return state.app.massRepos;\r\n};\r\nexport  const getId = (state:AppStateType) => {\r\n    return state.app.idSelectedRepo;\r\n};\r\nexport  const getIsFistTimeLoad = (state:AppStateType) => {\r\n    return state.app.isFirstTimeLoadApp;\r\n};\r\n\r\n\r\nexport const getRepositoris = createSelector(getRepos,(massRepos) =>{\r\n    return massRepos;\r\n});\r\nexport const getIdSelectRepo = createSelector(getId,(idSelectedRepo) =>{\r\n    return idSelectedRepo;\r\n});\r\nexport const getIsFistTimeLoadApp = createSelector(getIsFistTimeLoad,(isFirstTimeLoadApp) =>{\r\n    return isFirstTimeLoadApp;\r\n});\r\n","import React, {Component} from 'react';\nimport {Route, Switch,withRouter} from \"react-router-dom\";\nimport './App.css';\nimport {SplashScreen} from \"./components/splashScreen/splashScreen\";\nimport {AppStateType} from \"./redux/store\";\nimport {HomePage} from \"./pages/home/HomePage\";\nimport {connect} from \"react-redux\";\nimport {setFlagFirstTimeLoadApp} from \"./redux/reducer\"\nimport {DetailPage} from \"./pages/detail/DetailPage\";\nimport {compose} from \"redux\";\nimport {getIdSelectRepo, getIsFistTimeLoadApp, getRepositoris} from \"./redux/selectors\";\n\n\n\ntype mapStatePropsType= ReturnType<typeof mapStateToProps>\ntype mapDispatchPropsType={\n    setFlagFirstTimeLoadApp:(flag:boolean)=>void\n}\n\n\n\nclass App extends Component<mapDispatchPropsType& mapStatePropsType> {\n\n    componentDidMount(){\n        setTimeout(() => this.props.setFlagFirstTimeLoadApp(true), 3000);\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <Switch>\n                    {!this.props.isFirstTimeLoadApp\n                        ? <SplashScreen/>\n                        : <Route exact path='/' render={() => <HomePage dataRepoz={this.props.massRepos}/>}/>\n                    }\n                    {// @ts-ignore\n                        this.props.idSelectedRepo !== null && <Route path='/details' render={() => <DetailPage data={this.props.massRepos[this.props.idSelectedRepo]}/>}/>}\n                    <Route path='*' render={() => <div> 404 not found </div>}/>\n                </Switch>\n            </div>\n        );\n\n    }\n}\n\nconst mapStateToProps=(state:AppStateType) => ({\n    massRepos: getRepositoris(state),\n    idSelectedRepo:  getIdSelectRepo(state),\n    isFirstTimeLoadApp: getIsFistTimeLoadApp(state)\n});\n\n\nexport default compose (\n    withRouter,\n    connect (mapStateToProps, {setFlagFirstTimeLoadApp})\n)(App)as React.ComponentType;\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport reducer from \"./reducer\";\r\n\r\ntype RootReduserType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReduserType>;\r\ntype PropertyTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport  type InferActionType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertyTypes<T>>\r\nexport type BaseThuncType<AT extends Action, TH = Promise<void>> = ThunkAction<TH, AppStateType, unknown, AT>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;//для подключения к проекту расширения REDUX для google chrom\r\n\r\nlet reducers = combineReducers(\r\n    {\r\n        app: reducer,\r\n        form: formReducer,\r\n    }\r\n);\r\n\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\nimport store from './redux/store';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App  />\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"homePage_container__3nsCG\",\"btn_group\":\"homePage_btn_group__3Jx-0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textareaAddMess\":\"FormControls_textareaAddMess__3PS5L\",\"input\":\"FormControls_input__2kKs_\",\"error\":\"FormControls_error__2xnxl\",\"spanError\":\"FormControls_spanError__2vC1Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"detailPage_block__2BC16\",\"block_info\":\"detailPage_block_info__fY9Bs\"};"],"sourceRoot":""}